/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResetPasswordRouteImport } from './routes/reset-password'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as PrivateRouteImport } from './routes/_private'

const PrivateIndexLazyRouteImport = createFileRoute('/_private/')()
const AuthSignUpLazyRouteImport = createFileRoute('/auth/signUp')()
const AuthSignInLazyRouteImport = createFileRoute('/auth/signIn')()
const AuthRecoveryPasswordLazyRouteImport = createFileRoute(
  '/auth/recovery-password',
)()
const PrivateCallLazyRouteImport = createFileRoute('/_private/call')()

const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRoute = PrivateRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateIndexLazyRoute = PrivateIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateRoute,
} as any).lazy(() =>
  import('./routes/_private/index.lazy').then((d) => d.Route),
)
const AuthSignUpLazyRoute = AuthSignUpLazyRouteImport.update({
  id: '/signUp',
  path: '/signUp',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth/signUp.lazy').then((d) => d.Route))
const AuthSignInLazyRoute = AuthSignInLazyRouteImport.update({
  id: '/signIn',
  path: '/signIn',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth/signIn.lazy').then((d) => d.Route))
const AuthRecoveryPasswordLazyRoute =
  AuthRecoveryPasswordLazyRouteImport.update({
    id: '/recovery-password',
    path: '/recovery-password',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/auth/recovery-password.lazy').then((d) => d.Route),
  )
const PrivateCallLazyRoute = PrivateCallLazyRouteImport.update({
  id: '/call',
  path: '/call',
  getParentRoute: () => PrivateRoute,
} as any).lazy(() => import('./routes/_private/call.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteWithChildren
  '/reset-password': typeof ResetPasswordRoute
  '/call': typeof PrivateCallLazyRoute
  '/auth/recovery-password': typeof AuthRecoveryPasswordLazyRoute
  '/auth/signIn': typeof AuthSignInLazyRoute
  '/auth/signUp': typeof AuthSignUpLazyRoute
  '/': typeof PrivateIndexLazyRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteWithChildren
  '/reset-password': typeof ResetPasswordRoute
  '/call': typeof PrivateCallLazyRoute
  '/auth/recovery-password': typeof AuthRecoveryPasswordLazyRoute
  '/auth/signIn': typeof AuthSignInLazyRoute
  '/auth/signUp': typeof AuthSignUpLazyRoute
  '/': typeof PrivateIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_private': typeof PrivateRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/reset-password': typeof ResetPasswordRoute
  '/_private/call': typeof PrivateCallLazyRoute
  '/auth/recovery-password': typeof AuthRecoveryPasswordLazyRoute
  '/auth/signIn': typeof AuthSignInLazyRoute
  '/auth/signUp': typeof AuthSignUpLazyRoute
  '/_private/': typeof PrivateIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/reset-password'
    | '/call'
    | '/auth/recovery-password'
    | '/auth/signIn'
    | '/auth/signUp'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/reset-password'
    | '/call'
    | '/auth/recovery-password'
    | '/auth/signIn'
    | '/auth/signUp'
    | '/'
  id:
    | '__root__'
    | '/_private'
    | '/auth'
    | '/reset-password'
    | '/_private/call'
    | '/auth/recovery-password'
    | '/auth/signIn'
    | '/auth/signUp'
    | '/_private/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  ResetPasswordRoute: typeof ResetPasswordRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/': {
      id: '/_private/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PrivateIndexLazyRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/auth/signUp': {
      id: '/auth/signUp'
      path: '/signUp'
      fullPath: '/auth/signUp'
      preLoaderRoute: typeof AuthSignUpLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/signIn': {
      id: '/auth/signIn'
      path: '/signIn'
      fullPath: '/auth/signIn'
      preLoaderRoute: typeof AuthSignInLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/recovery-password': {
      id: '/auth/recovery-password'
      path: '/recovery-password'
      fullPath: '/auth/recovery-password'
      preLoaderRoute: typeof AuthRecoveryPasswordLazyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_private/call': {
      id: '/_private/call'
      path: '/call'
      fullPath: '/call'
      preLoaderRoute: typeof PrivateCallLazyRouteImport
      parentRoute: typeof PrivateRoute
    }
  }
}

interface PrivateRouteChildren {
  PrivateCallLazyRoute: typeof PrivateCallLazyRoute
  PrivateIndexLazyRoute: typeof PrivateIndexLazyRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateCallLazyRoute: PrivateCallLazyRoute,
  PrivateIndexLazyRoute: PrivateIndexLazyRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

interface AuthRouteChildren {
  AuthRecoveryPasswordLazyRoute: typeof AuthRecoveryPasswordLazyRoute
  AuthSignInLazyRoute: typeof AuthSignInLazyRoute
  AuthSignUpLazyRoute: typeof AuthSignUpLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthRecoveryPasswordLazyRoute: AuthRecoveryPasswordLazyRoute,
  AuthSignInLazyRoute: AuthSignInLazyRoute,
  AuthSignUpLazyRoute: AuthSignUpLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  ResetPasswordRoute: ResetPasswordRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
